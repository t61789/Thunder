//this source code was auto-generated by tolua#, do not modify it
using LuaInterface;
using System;
using System.Collections.Generic;

public class DelegateFactory
{
    public delegate Delegate DelegateCreate(LuaFunction func, LuaTable self, bool flag);
    public static Dictionary<Type, DelegateCreate> dict = new Dictionary<Type, DelegateCreate>();
    static DelegateFactory factory = new DelegateFactory();

    public static void Init()
    {
        Register();
    }

    public static void Register()
    {
        dict.Clear();
        dict.Add(typeof(System.Action), factory.System_Action);
        dict.Add(typeof(UnityEngine.Events.UnityAction), factory.UnityEngine_Events_UnityAction);
        dict.Add(typeof(System.Predicate<int>), factory.System_Predicate_int);
        dict.Add(typeof(System.Action<int>), factory.System_Action_int);
        dict.Add(typeof(System.Comparison<int>), factory.System_Comparison_int);
        dict.Add(typeof(System.Func<int, int>), factory.System_Func_int_int);
        dict.Add(typeof(UnityEngine.Camera.CameraCallback), factory.UnityEngine_Camera_CameraCallback);
        dict.Add(typeof(UnityEngine.Application.AdvertisingIdentifierCallback), factory.UnityEngine_Application_AdvertisingIdentifierCallback);
        dict.Add(typeof(UnityEngine.Application.LowMemoryCallback), factory.UnityEngine_Application_LowMemoryCallback);
        dict.Add(typeof(UnityEngine.Application.LogCallback), factory.UnityEngine_Application_LogCallback);
        dict.Add(typeof(System.Action<bool>), factory.System_Action_bool);
        dict.Add(typeof(System.Action<string>), factory.System_Action_string);
        dict.Add(typeof(System.Func<bool>), factory.System_Func_bool);
        dict.Add(typeof(UnityEngine.AudioClip.PCMReaderCallback), factory.UnityEngine_AudioClip_PCMReaderCallback);
        dict.Add(typeof(UnityEngine.AudioClip.PCMSetPositionCallback), factory.UnityEngine_AudioClip_PCMSetPositionCallback);
        dict.Add(typeof(System.Action<UnityEngine.AsyncOperation>), factory.System_Action_UnityEngine_AsyncOperation);
        dict.Add(typeof(Thunder.UI.BaseUi.PointerDel), factory.Thunder_UI_BaseUi_PointerDel);
        dict.Add(typeof(Thunder.UI.BaseUi.AfterOpenDel), factory.Thunder_UI_BaseUi_AfterOpenDel);
        dict.Add(typeof(Thunder.UI.BaseUi.BeforeCloseDel), factory.Thunder_UI_BaseUi_BeforeCloseDel);
        dict.Add(typeof(Thunder.UI.BaseUi.CloseCheck), factory.Thunder_UI_BaseUi_CloseCheck);
        dict.Add(typeof(Thunder.UI.BuildShipPanel.BuildShipCompleteDel), factory.Thunder_UI_BuildShipPanel_BuildShipCompleteDel);
        dict.Add(typeof(Thunder.Turret.Aircraft.DeadDel), factory.Thunder_Turret_Aircraft_DeadDel);
        dict.Add(typeof(Thunder.Tool.BehaviorTree.ActionNode.DelAction), factory.Thunder_Tool_BehaviorTree_ActionNode_DelAction);
        dict.Add(typeof(Thunder.Tool.BehaviorTree.ConditionNode.DelCondition), factory.Thunder_Tool_BehaviorTree_ConditionNode_DelCondition);
        dict.Add(typeof(System.Action<Thunder.UI.BaseUi>), factory.System_Action_Thunder_UI_BaseUi);
        dict.Add(typeof(System.Action<Thunder.GameMode.BaseGameMode>), factory.System_Action_Thunder_GameMode_BaseGameMode);
        dict.Add(typeof(Thunder.GameMode.BaseGameMode.ModeComplete), factory.Thunder_GameMode_BaseGameMode_ModeComplete);

        DelegateTraits<System.Action>.Init(factory.System_Action);
        DelegateTraits<UnityEngine.Events.UnityAction>.Init(factory.UnityEngine_Events_UnityAction);
        DelegateTraits<System.Predicate<int>>.Init(factory.System_Predicate_int);
        DelegateTraits<System.Action<int>>.Init(factory.System_Action_int);
        DelegateTraits<System.Comparison<int>>.Init(factory.System_Comparison_int);
        DelegateTraits<System.Func<int, int>>.Init(factory.System_Func_int_int);
        DelegateTraits<UnityEngine.Camera.CameraCallback>.Init(factory.UnityEngine_Camera_CameraCallback);
        DelegateTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Init(factory.UnityEngine_Application_AdvertisingIdentifierCallback);
        DelegateTraits<UnityEngine.Application.LowMemoryCallback>.Init(factory.UnityEngine_Application_LowMemoryCallback);
        DelegateTraits<UnityEngine.Application.LogCallback>.Init(factory.UnityEngine_Application_LogCallback);
        DelegateTraits<System.Action<bool>>.Init(factory.System_Action_bool);
        DelegateTraits<System.Action<string>>.Init(factory.System_Action_string);
        DelegateTraits<System.Func<bool>>.Init(factory.System_Func_bool);
        DelegateTraits<UnityEngine.AudioClip.PCMReaderCallback>.Init(factory.UnityEngine_AudioClip_PCMReaderCallback);
        DelegateTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Init(factory.UnityEngine_AudioClip_PCMSetPositionCallback);
        DelegateTraits<System.Action<UnityEngine.AsyncOperation>>.Init(factory.System_Action_UnityEngine_AsyncOperation);
        DelegateTraits<Thunder.UI.BaseUi.PointerDel>.Init(factory.Thunder_UI_BaseUi_PointerDel);
        DelegateTraits<Thunder.UI.BaseUi.AfterOpenDel>.Init(factory.Thunder_UI_BaseUi_AfterOpenDel);
        DelegateTraits<Thunder.UI.BaseUi.BeforeCloseDel>.Init(factory.Thunder_UI_BaseUi_BeforeCloseDel);
        DelegateTraits<Thunder.UI.BaseUi.CloseCheck>.Init(factory.Thunder_UI_BaseUi_CloseCheck);
        DelegateTraits<Thunder.UI.BuildShipPanel.BuildShipCompleteDel>.Init(factory.Thunder_UI_BuildShipPanel_BuildShipCompleteDel);
        DelegateTraits<Thunder.Turret.Aircraft.DeadDel>.Init(factory.Thunder_Turret_Aircraft_DeadDel);
        DelegateTraits<Thunder.Tool.BehaviorTree.ActionNode.DelAction>.Init(factory.Thunder_Tool_BehaviorTree_ActionNode_DelAction);
        DelegateTraits<Thunder.Tool.BehaviorTree.ConditionNode.DelCondition>.Init(factory.Thunder_Tool_BehaviorTree_ConditionNode_DelCondition);
        DelegateTraits<System.Action<Thunder.UI.BaseUi>>.Init(factory.System_Action_Thunder_UI_BaseUi);
        DelegateTraits<System.Action<Thunder.GameMode.BaseGameMode>>.Init(factory.System_Action_Thunder_GameMode_BaseGameMode);
        DelegateTraits<Thunder.GameMode.BaseGameMode.ModeComplete>.Init(factory.Thunder_GameMode_BaseGameMode_ModeComplete);

        TypeTraits<System.Action>.Init(factory.Check_System_Action);
        TypeTraits<UnityEngine.Events.UnityAction>.Init(factory.Check_UnityEngine_Events_UnityAction);
        TypeTraits<System.Predicate<int>>.Init(factory.Check_System_Predicate_int);
        TypeTraits<System.Action<int>>.Init(factory.Check_System_Action_int);
        TypeTraits<System.Comparison<int>>.Init(factory.Check_System_Comparison_int);
        TypeTraits<System.Func<int, int>>.Init(factory.Check_System_Func_int_int);
        TypeTraits<UnityEngine.Camera.CameraCallback>.Init(factory.Check_UnityEngine_Camera_CameraCallback);
        TypeTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Init(factory.Check_UnityEngine_Application_AdvertisingIdentifierCallback);
        TypeTraits<UnityEngine.Application.LowMemoryCallback>.Init(factory.Check_UnityEngine_Application_LowMemoryCallback);
        TypeTraits<UnityEngine.Application.LogCallback>.Init(factory.Check_UnityEngine_Application_LogCallback);
        TypeTraits<System.Action<bool>>.Init(factory.Check_System_Action_bool);
        TypeTraits<System.Action<string>>.Init(factory.Check_System_Action_string);
        TypeTraits<System.Func<bool>>.Init(factory.Check_System_Func_bool);
        TypeTraits<UnityEngine.AudioClip.PCMReaderCallback>.Init(factory.Check_UnityEngine_AudioClip_PCMReaderCallback);
        TypeTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Init(factory.Check_UnityEngine_AudioClip_PCMSetPositionCallback);
        TypeTraits<System.Action<UnityEngine.AsyncOperation>>.Init(factory.Check_System_Action_UnityEngine_AsyncOperation);
        TypeTraits<Thunder.UI.BaseUi.PointerDel>.Init(factory.Check_Thunder_UI_BaseUi_PointerDel);
        TypeTraits<Thunder.UI.BaseUi.AfterOpenDel>.Init(factory.Check_Thunder_UI_BaseUi_AfterOpenDel);
        TypeTraits<Thunder.UI.BaseUi.BeforeCloseDel>.Init(factory.Check_Thunder_UI_BaseUi_BeforeCloseDel);
        TypeTraits<Thunder.UI.BaseUi.CloseCheck>.Init(factory.Check_Thunder_UI_BaseUi_CloseCheck);
        TypeTraits<Thunder.UI.BuildShipPanel.BuildShipCompleteDel>.Init(factory.Check_Thunder_UI_BuildShipPanel_BuildShipCompleteDel);
        TypeTraits<Thunder.Turret.Aircraft.DeadDel>.Init(factory.Check_Thunder_Turret_Aircraft_DeadDel);
        TypeTraits<Thunder.Tool.BehaviorTree.ActionNode.DelAction>.Init(factory.Check_Thunder_Tool_BehaviorTree_ActionNode_DelAction);
        TypeTraits<Thunder.Tool.BehaviorTree.ConditionNode.DelCondition>.Init(factory.Check_Thunder_Tool_BehaviorTree_ConditionNode_DelCondition);
        TypeTraits<System.Action<Thunder.UI.BaseUi>>.Init(factory.Check_System_Action_Thunder_UI_BaseUi);
        TypeTraits<System.Action<Thunder.GameMode.BaseGameMode>>.Init(factory.Check_System_Action_Thunder_GameMode_BaseGameMode);
        TypeTraits<Thunder.GameMode.BaseGameMode.ModeComplete>.Init(factory.Check_Thunder_GameMode_BaseGameMode_ModeComplete);

        StackTraits<System.Action>.Push = factory.Push_System_Action;
        StackTraits<UnityEngine.Events.UnityAction>.Push = factory.Push_UnityEngine_Events_UnityAction;
        StackTraits<System.Predicate<int>>.Push = factory.Push_System_Predicate_int;
        StackTraits<System.Action<int>>.Push = factory.Push_System_Action_int;
        StackTraits<System.Comparison<int>>.Push = factory.Push_System_Comparison_int;
        StackTraits<System.Func<int, int>>.Push = factory.Push_System_Func_int_int;
        StackTraits<UnityEngine.Camera.CameraCallback>.Push = factory.Push_UnityEngine_Camera_CameraCallback;
        StackTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Push = factory.Push_UnityEngine_Application_AdvertisingIdentifierCallback;
        StackTraits<UnityEngine.Application.LowMemoryCallback>.Push = factory.Push_UnityEngine_Application_LowMemoryCallback;
        StackTraits<UnityEngine.Application.LogCallback>.Push = factory.Push_UnityEngine_Application_LogCallback;
        StackTraits<System.Action<bool>>.Push = factory.Push_System_Action_bool;
        StackTraits<System.Action<string>>.Push = factory.Push_System_Action_string;
        StackTraits<System.Func<bool>>.Push = factory.Push_System_Func_bool;
        StackTraits<UnityEngine.AudioClip.PCMReaderCallback>.Push = factory.Push_UnityEngine_AudioClip_PCMReaderCallback;
        StackTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Push = factory.Push_UnityEngine_AudioClip_PCMSetPositionCallback;
        StackTraits<System.Action<UnityEngine.AsyncOperation>>.Push = factory.Push_System_Action_UnityEngine_AsyncOperation;
        StackTraits<Thunder.UI.BaseUi.PointerDel>.Push = factory.Push_Thunder_UI_BaseUi_PointerDel;
        StackTraits<Thunder.UI.BaseUi.AfterOpenDel>.Push = factory.Push_Thunder_UI_BaseUi_AfterOpenDel;
        StackTraits<Thunder.UI.BaseUi.BeforeCloseDel>.Push = factory.Push_Thunder_UI_BaseUi_BeforeCloseDel;
        StackTraits<Thunder.UI.BaseUi.CloseCheck>.Push = factory.Push_Thunder_UI_BaseUi_CloseCheck;
        StackTraits<Thunder.UI.BuildShipPanel.BuildShipCompleteDel>.Push = factory.Push_Thunder_UI_BuildShipPanel_BuildShipCompleteDel;
        StackTraits<Thunder.Turret.Aircraft.DeadDel>.Push = factory.Push_Thunder_Turret_Aircraft_DeadDel;
        StackTraits<Thunder.Tool.BehaviorTree.ActionNode.DelAction>.Push = factory.Push_Thunder_Tool_BehaviorTree_ActionNode_DelAction;
        StackTraits<Thunder.Tool.BehaviorTree.ConditionNode.DelCondition>.Push = factory.Push_Thunder_Tool_BehaviorTree_ConditionNode_DelCondition;
        StackTraits<System.Action<Thunder.UI.BaseUi>>.Push = factory.Push_System_Action_Thunder_UI_BaseUi;
        StackTraits<System.Action<Thunder.GameMode.BaseGameMode>>.Push = factory.Push_System_Action_Thunder_GameMode_BaseGameMode;
        StackTraits<Thunder.GameMode.BaseGameMode.ModeComplete>.Push = factory.Push_Thunder_GameMode_BaseGameMode_ModeComplete;
    }

    public static Delegate CreateDelegate(Type t, LuaFunction func = null)
    {
        DelegateCreate Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func);

            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }
            else
            {
                Delegate d = Create(func, null, false);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func);
                return d;
            }
        }

        return Create(null, null, false);
    }

    public static Delegate CreateDelegate(Type t, LuaFunction func, LuaTable self)
    {
        DelegateCreate Create = null;

        if (!dict.TryGetValue(t, out Create))
        {
            throw new LuaException(string.Format("Delegate {0} not register", LuaMisc.GetTypeName(t)));
        }

        if (func != null)
        {
            LuaState state = func.GetLuaState();
            LuaDelegate target = state.GetLuaDelegate(func, self);

            if (target != null)
            {
                return Delegate.CreateDelegate(t, target, target.method);
            }
            else
            {
                Delegate d = Create(func, self, true);
                target = d.Target as LuaDelegate;
                state.AddLuaDelegate(target, func, self);
                return d;
            }
        }

        return Create(null, null, true);
    }

    public static Delegate RemoveDelegate(Delegate obj, LuaFunction func)
    {
        LuaState state = func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld.func == func)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                break;
            }
        }

        return obj;
    }

    public static Delegate RemoveDelegate(Delegate obj, Delegate dg)
    {
        LuaDelegate remove = dg.Target as LuaDelegate;

        if (remove == null)
        {
            obj = Delegate.Remove(obj, dg);
            return obj;
        }

        LuaState state = remove.func.GetLuaState();
        Delegate[] ds = obj.GetInvocationList();

        for (int i = 0; i < ds.Length; i++)
        {
            LuaDelegate ld = ds[i].Target as LuaDelegate;

            if (ld != null && ld == remove)
            {
                obj = Delegate.Remove(obj, ds[i]);
                state.DelayDispose(ld.func);
                state.DelayDispose(ld.self);
                break;
            }
        }

        return obj;
    }

    class System_Action_Event : LuaDelegate
    {
        public System_Action_Event(LuaFunction func) : base(func) { }
        public System_Action_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call()
        {
            func.Call();
        }

        public void CallWithSelf()
        {
            func.BeginPCall();
            func.Push(self);
            func.PCall();
            func.EndPCall();
        }
    }

    public System.Action System_Action(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Action fn = delegate () { };
            return fn;
        }

        if (!flag)
        {
            System_Action_Event target = new System_Action_Event(func);
            System.Action d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Action_Event target = new System_Action_Event(func, self);
            System.Action d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Action(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Action), L, pos);
    }

    void Push_System_Action(IntPtr L, System.Action o)
    {
        ToLua.Push(L, o);
    }

    class UnityEngine_Events_UnityAction_Event : LuaDelegate
    {
        public UnityEngine_Events_UnityAction_Event(LuaFunction func) : base(func) { }
        public UnityEngine_Events_UnityAction_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call()
        {
            func.Call();
        }

        public void CallWithSelf()
        {
            func.BeginPCall();
            func.Push(self);
            func.PCall();
            func.EndPCall();
        }
    }

    public UnityEngine.Events.UnityAction UnityEngine_Events_UnityAction(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            UnityEngine.Events.UnityAction fn = delegate () { };
            return fn;
        }

        if (!flag)
        {
            UnityEngine_Events_UnityAction_Event target = new UnityEngine_Events_UnityAction_Event(func);
            UnityEngine.Events.UnityAction d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            UnityEngine_Events_UnityAction_Event target = new UnityEngine_Events_UnityAction_Event(func, self);
            UnityEngine.Events.UnityAction d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_UnityEngine_Events_UnityAction(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(UnityEngine.Events.UnityAction), L, pos);
    }

    void Push_UnityEngine_Events_UnityAction(IntPtr L, UnityEngine.Events.UnityAction o)
    {
        ToLua.Push(L, o);
    }

    class System_Predicate_int_Event : LuaDelegate
    {
        public System_Predicate_int_Event(LuaFunction func) : base(func) { }
        public System_Predicate_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public bool Call(int param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            bool ret = func.CheckBoolean();
            func.EndPCall();
            return ret;
        }

        public bool CallWithSelf(int param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            bool ret = func.CheckBoolean();
            func.EndPCall();
            return ret;
        }
    }

    public System.Predicate<int> System_Predicate_int(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Predicate<int> fn = delegate (int param0) { return false; };
            return fn;
        }

        if (!flag)
        {
            System_Predicate_int_Event target = new System_Predicate_int_Event(func);
            System.Predicate<int> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Predicate_int_Event target = new System_Predicate_int_Event(func, self);
            System.Predicate<int> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Predicate_int(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Predicate<int>), L, pos);
    }

    void Push_System_Predicate_int(IntPtr L, System.Predicate<int> o)
    {
        ToLua.Push(L, o);
    }

    class System_Action_int_Event : LuaDelegate
    {
        public System_Action_int_Event(LuaFunction func) : base(func) { }
        public System_Action_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(int param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(int param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public System.Action<int> System_Action_int(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Action<int> fn = delegate (int param0) { };
            return fn;
        }

        if (!flag)
        {
            System_Action_int_Event target = new System_Action_int_Event(func);
            System.Action<int> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Action_int_Event target = new System_Action_int_Event(func, self);
            System.Action<int> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Action_int(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Action<int>), L, pos);
    }

    void Push_System_Action_int(IntPtr L, System.Action<int> o)
    {
        ToLua.Push(L, o);
    }

    class System_Comparison_int_Event : LuaDelegate
    {
        public System_Comparison_int_Event(LuaFunction func) : base(func) { }
        public System_Comparison_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public int Call(int param0, int param1)
        {
            func.BeginPCall();
            func.Push(param0);
            func.Push(param1);
            func.PCall();
            int ret = (int)func.CheckNumber();
            func.EndPCall();
            return ret;
        }

        public int CallWithSelf(int param0, int param1)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.Push(param1);
            func.PCall();
            int ret = (int)func.CheckNumber();
            func.EndPCall();
            return ret;
        }
    }

    public System.Comparison<int> System_Comparison_int(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Comparison<int> fn = delegate (int param0, int param1) { return 0; };
            return fn;
        }

        if (!flag)
        {
            System_Comparison_int_Event target = new System_Comparison_int_Event(func);
            System.Comparison<int> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Comparison_int_Event target = new System_Comparison_int_Event(func, self);
            System.Comparison<int> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Comparison_int(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Comparison<int>), L, pos);
    }

    void Push_System_Comparison_int(IntPtr L, System.Comparison<int> o)
    {
        ToLua.Push(L, o);
    }

    class System_Func_int_int_Event : LuaDelegate
    {
        public System_Func_int_int_Event(LuaFunction func) : base(func) { }
        public System_Func_int_int_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public int Call(int param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            int ret = (int)func.CheckNumber();
            func.EndPCall();
            return ret;
        }

        public int CallWithSelf(int param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            int ret = (int)func.CheckNumber();
            func.EndPCall();
            return ret;
        }
    }

    public System.Func<int, int> System_Func_int_int(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Func<int, int> fn = delegate (int param0) { return 0; };
            return fn;
        }

        if (!flag)
        {
            System_Func_int_int_Event target = new System_Func_int_int_Event(func);
            System.Func<int, int> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Func_int_int_Event target = new System_Func_int_int_Event(func, self);
            System.Func<int, int> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Func_int_int(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Func<int, int>), L, pos);
    }

    void Push_System_Func_int_int(IntPtr L, System.Func<int, int> o)
    {
        ToLua.Push(L, o);
    }

    class UnityEngine_Camera_CameraCallback_Event : LuaDelegate
    {
        public UnityEngine_Camera_CameraCallback_Event(LuaFunction func) : base(func) { }
        public UnityEngine_Camera_CameraCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(UnityEngine.Camera param0)
        {
            func.BeginPCall();
            func.PushSealed(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(UnityEngine.Camera param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.PushSealed(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public UnityEngine.Camera.CameraCallback UnityEngine_Camera_CameraCallback(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            UnityEngine.Camera.CameraCallback fn = delegate (UnityEngine.Camera param0) { };
            return fn;
        }

        if (!flag)
        {
            UnityEngine_Camera_CameraCallback_Event target = new UnityEngine_Camera_CameraCallback_Event(func);
            UnityEngine.Camera.CameraCallback d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            UnityEngine_Camera_CameraCallback_Event target = new UnityEngine_Camera_CameraCallback_Event(func, self);
            UnityEngine.Camera.CameraCallback d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_UnityEngine_Camera_CameraCallback(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(UnityEngine.Camera.CameraCallback), L, pos);
    }

    void Push_UnityEngine_Camera_CameraCallback(IntPtr L, UnityEngine.Camera.CameraCallback o)
    {
        ToLua.Push(L, o);
    }

    class UnityEngine_Application_AdvertisingIdentifierCallback_Event : LuaDelegate
    {
        public UnityEngine_Application_AdvertisingIdentifierCallback_Event(LuaFunction func) : base(func) { }
        public UnityEngine_Application_AdvertisingIdentifierCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(string param0, bool param1, string param2)
        {
            func.BeginPCall();
            func.Push(param0);
            func.Push(param1);
            func.Push(param2);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(string param0, bool param1, string param2)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.Push(param1);
            func.Push(param2);
            func.PCall();
            func.EndPCall();
        }
    }

    public UnityEngine.Application.AdvertisingIdentifierCallback UnityEngine_Application_AdvertisingIdentifierCallback(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            UnityEngine.Application.AdvertisingIdentifierCallback fn = delegate (string param0, bool param1, string param2) { };
            return fn;
        }

        if (!flag)
        {
            UnityEngine_Application_AdvertisingIdentifierCallback_Event target = new UnityEngine_Application_AdvertisingIdentifierCallback_Event(func);
            UnityEngine.Application.AdvertisingIdentifierCallback d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            UnityEngine_Application_AdvertisingIdentifierCallback_Event target = new UnityEngine_Application_AdvertisingIdentifierCallback_Event(func, self);
            UnityEngine.Application.AdvertisingIdentifierCallback d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_UnityEngine_Application_AdvertisingIdentifierCallback(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(UnityEngine.Application.AdvertisingIdentifierCallback), L, pos);
    }

    void Push_UnityEngine_Application_AdvertisingIdentifierCallback(IntPtr L, UnityEngine.Application.AdvertisingIdentifierCallback o)
    {
        ToLua.Push(L, o);
    }

    class UnityEngine_Application_LowMemoryCallback_Event : LuaDelegate
    {
        public UnityEngine_Application_LowMemoryCallback_Event(LuaFunction func) : base(func) { }
        public UnityEngine_Application_LowMemoryCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call()
        {
            func.Call();
        }

        public void CallWithSelf()
        {
            func.BeginPCall();
            func.Push(self);
            func.PCall();
            func.EndPCall();
        }
    }

    public UnityEngine.Application.LowMemoryCallback UnityEngine_Application_LowMemoryCallback(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            UnityEngine.Application.LowMemoryCallback fn = delegate () { };
            return fn;
        }

        if (!flag)
        {
            UnityEngine_Application_LowMemoryCallback_Event target = new UnityEngine_Application_LowMemoryCallback_Event(func);
            UnityEngine.Application.LowMemoryCallback d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            UnityEngine_Application_LowMemoryCallback_Event target = new UnityEngine_Application_LowMemoryCallback_Event(func, self);
            UnityEngine.Application.LowMemoryCallback d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_UnityEngine_Application_LowMemoryCallback(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(UnityEngine.Application.LowMemoryCallback), L, pos);
    }

    void Push_UnityEngine_Application_LowMemoryCallback(IntPtr L, UnityEngine.Application.LowMemoryCallback o)
    {
        ToLua.Push(L, o);
    }

    class UnityEngine_Application_LogCallback_Event : LuaDelegate
    {
        public UnityEngine_Application_LogCallback_Event(LuaFunction func) : base(func) { }
        public UnityEngine_Application_LogCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(string param0, string param1, UnityEngine.LogType param2)
        {
            func.BeginPCall();
            func.Push(param0);
            func.Push(param1);
            func.Push(param2);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(string param0, string param1, UnityEngine.LogType param2)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.Push(param1);
            func.Push(param2);
            func.PCall();
            func.EndPCall();
        }
    }

    public UnityEngine.Application.LogCallback UnityEngine_Application_LogCallback(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            UnityEngine.Application.LogCallback fn = delegate (string param0, string param1, UnityEngine.LogType param2) { };
            return fn;
        }

        if (!flag)
        {
            UnityEngine_Application_LogCallback_Event target = new UnityEngine_Application_LogCallback_Event(func);
            UnityEngine.Application.LogCallback d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            UnityEngine_Application_LogCallback_Event target = new UnityEngine_Application_LogCallback_Event(func, self);
            UnityEngine.Application.LogCallback d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_UnityEngine_Application_LogCallback(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(UnityEngine.Application.LogCallback), L, pos);
    }

    void Push_UnityEngine_Application_LogCallback(IntPtr L, UnityEngine.Application.LogCallback o)
    {
        ToLua.Push(L, o);
    }

    class System_Action_bool_Event : LuaDelegate
    {
        public System_Action_bool_Event(LuaFunction func) : base(func) { }
        public System_Action_bool_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(bool param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(bool param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public System.Action<bool> System_Action_bool(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Action<bool> fn = delegate (bool param0) { };
            return fn;
        }

        if (!flag)
        {
            System_Action_bool_Event target = new System_Action_bool_Event(func);
            System.Action<bool> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Action_bool_Event target = new System_Action_bool_Event(func, self);
            System.Action<bool> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Action_bool(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Action<bool>), L, pos);
    }

    void Push_System_Action_bool(IntPtr L, System.Action<bool> o)
    {
        ToLua.Push(L, o);
    }

    class System_Action_string_Event : LuaDelegate
    {
        public System_Action_string_Event(LuaFunction func) : base(func) { }
        public System_Action_string_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(string param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(string param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public System.Action<string> System_Action_string(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Action<string> fn = delegate (string param0) { };
            return fn;
        }

        if (!flag)
        {
            System_Action_string_Event target = new System_Action_string_Event(func);
            System.Action<string> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Action_string_Event target = new System_Action_string_Event(func, self);
            System.Action<string> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Action_string(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Action<string>), L, pos);
    }

    void Push_System_Action_string(IntPtr L, System.Action<string> o)
    {
        ToLua.Push(L, o);
    }

    class System_Func_bool_Event : LuaDelegate
    {
        public System_Func_bool_Event(LuaFunction func) : base(func) { }
        public System_Func_bool_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public bool Call()
        {
            func.BeginPCall();
            func.PCall();
            bool ret = func.CheckBoolean();
            func.EndPCall();
            return ret;
        }

        public bool CallWithSelf()
        {
            func.BeginPCall();
            func.Push(self);
            func.PCall();
            bool ret = func.CheckBoolean();
            func.EndPCall();
            return ret;
        }
    }

    public System.Func<bool> System_Func_bool(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Func<bool> fn = delegate () { return false; };
            return fn;
        }

        if (!flag)
        {
            System_Func_bool_Event target = new System_Func_bool_Event(func);
            System.Func<bool> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Func_bool_Event target = new System_Func_bool_Event(func, self);
            System.Func<bool> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Func_bool(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Func<bool>), L, pos);
    }

    void Push_System_Func_bool(IntPtr L, System.Func<bool> o)
    {
        ToLua.Push(L, o);
    }

    class UnityEngine_AudioClip_PCMReaderCallback_Event : LuaDelegate
    {
        public UnityEngine_AudioClip_PCMReaderCallback_Event(LuaFunction func) : base(func) { }
        public UnityEngine_AudioClip_PCMReaderCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(float[] param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(float[] param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public UnityEngine.AudioClip.PCMReaderCallback UnityEngine_AudioClip_PCMReaderCallback(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            UnityEngine.AudioClip.PCMReaderCallback fn = delegate (float[] param0) { };
            return fn;
        }

        if (!flag)
        {
            UnityEngine_AudioClip_PCMReaderCallback_Event target = new UnityEngine_AudioClip_PCMReaderCallback_Event(func);
            UnityEngine.AudioClip.PCMReaderCallback d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            UnityEngine_AudioClip_PCMReaderCallback_Event target = new UnityEngine_AudioClip_PCMReaderCallback_Event(func, self);
            UnityEngine.AudioClip.PCMReaderCallback d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_UnityEngine_AudioClip_PCMReaderCallback(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(UnityEngine.AudioClip.PCMReaderCallback), L, pos);
    }

    void Push_UnityEngine_AudioClip_PCMReaderCallback(IntPtr L, UnityEngine.AudioClip.PCMReaderCallback o)
    {
        ToLua.Push(L, o);
    }

    class UnityEngine_AudioClip_PCMSetPositionCallback_Event : LuaDelegate
    {
        public UnityEngine_AudioClip_PCMSetPositionCallback_Event(LuaFunction func) : base(func) { }
        public UnityEngine_AudioClip_PCMSetPositionCallback_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(int param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(int param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public UnityEngine.AudioClip.PCMSetPositionCallback UnityEngine_AudioClip_PCMSetPositionCallback(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            UnityEngine.AudioClip.PCMSetPositionCallback fn = delegate (int param0) { };
            return fn;
        }

        if (!flag)
        {
            UnityEngine_AudioClip_PCMSetPositionCallback_Event target = new UnityEngine_AudioClip_PCMSetPositionCallback_Event(func);
            UnityEngine.AudioClip.PCMSetPositionCallback d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            UnityEngine_AudioClip_PCMSetPositionCallback_Event target = new UnityEngine_AudioClip_PCMSetPositionCallback_Event(func, self);
            UnityEngine.AudioClip.PCMSetPositionCallback d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_UnityEngine_AudioClip_PCMSetPositionCallback(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(UnityEngine.AudioClip.PCMSetPositionCallback), L, pos);
    }

    void Push_UnityEngine_AudioClip_PCMSetPositionCallback(IntPtr L, UnityEngine.AudioClip.PCMSetPositionCallback o)
    {
        ToLua.Push(L, o);
    }

    class System_Action_UnityEngine_AsyncOperation_Event : LuaDelegate
    {
        public System_Action_UnityEngine_AsyncOperation_Event(LuaFunction func) : base(func) { }
        public System_Action_UnityEngine_AsyncOperation_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(UnityEngine.AsyncOperation param0)
        {
            func.BeginPCall();
            func.PushObject(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(UnityEngine.AsyncOperation param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.PushObject(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public System.Action<UnityEngine.AsyncOperation> System_Action_UnityEngine_AsyncOperation(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Action<UnityEngine.AsyncOperation> fn = delegate (UnityEngine.AsyncOperation param0) { };
            return fn;
        }

        if (!flag)
        {
            System_Action_UnityEngine_AsyncOperation_Event target = new System_Action_UnityEngine_AsyncOperation_Event(func);
            System.Action<UnityEngine.AsyncOperation> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Action_UnityEngine_AsyncOperation_Event target = new System_Action_UnityEngine_AsyncOperation_Event(func, self);
            System.Action<UnityEngine.AsyncOperation> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Action_UnityEngine_AsyncOperation(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Action<UnityEngine.AsyncOperation>), L, pos);
    }

    void Push_System_Action_UnityEngine_AsyncOperation(IntPtr L, System.Action<UnityEngine.AsyncOperation> o)
    {
        ToLua.Push(L, o);
    }

    class Thunder_UI_BaseUi_PointerDel_Event : LuaDelegate
    {
        public Thunder_UI_BaseUi_PointerDel_Event(LuaFunction func) : base(func) { }
        public Thunder_UI_BaseUi_PointerDel_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(Thunder.UI.BaseUi param0, UnityEngine.EventSystems.PointerEventData param1)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PushObject(param1);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(Thunder.UI.BaseUi param0, UnityEngine.EventSystems.PointerEventData param1)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PushObject(param1);
            func.PCall();
            func.EndPCall();
        }
    }

    public Thunder.UI.BaseUi.PointerDel Thunder_UI_BaseUi_PointerDel(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            Thunder.UI.BaseUi.PointerDel fn = delegate (Thunder.UI.BaseUi param0, UnityEngine.EventSystems.PointerEventData param1) { };
            return fn;
        }

        if (!flag)
        {
            Thunder_UI_BaseUi_PointerDel_Event target = new Thunder_UI_BaseUi_PointerDel_Event(func);
            Thunder.UI.BaseUi.PointerDel d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            Thunder_UI_BaseUi_PointerDel_Event target = new Thunder_UI_BaseUi_PointerDel_Event(func, self);
            Thunder.UI.BaseUi.PointerDel d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_Thunder_UI_BaseUi_PointerDel(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(Thunder.UI.BaseUi.PointerDel), L, pos);
    }

    void Push_Thunder_UI_BaseUi_PointerDel(IntPtr L, Thunder.UI.BaseUi.PointerDel o)
    {
        ToLua.Push(L, o);
    }

    class Thunder_UI_BaseUi_AfterOpenDel_Event : LuaDelegate
    {
        public Thunder_UI_BaseUi_AfterOpenDel_Event(LuaFunction func) : base(func) { }
        public Thunder_UI_BaseUi_AfterOpenDel_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(Thunder.UI.BaseUi param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(Thunder.UI.BaseUi param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public Thunder.UI.BaseUi.AfterOpenDel Thunder_UI_BaseUi_AfterOpenDel(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            Thunder.UI.BaseUi.AfterOpenDel fn = delegate (Thunder.UI.BaseUi param0) { };
            return fn;
        }

        if (!flag)
        {
            Thunder_UI_BaseUi_AfterOpenDel_Event target = new Thunder_UI_BaseUi_AfterOpenDel_Event(func);
            Thunder.UI.BaseUi.AfterOpenDel d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            Thunder_UI_BaseUi_AfterOpenDel_Event target = new Thunder_UI_BaseUi_AfterOpenDel_Event(func, self);
            Thunder.UI.BaseUi.AfterOpenDel d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_Thunder_UI_BaseUi_AfterOpenDel(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(Thunder.UI.BaseUi.AfterOpenDel), L, pos);
    }

    void Push_Thunder_UI_BaseUi_AfterOpenDel(IntPtr L, Thunder.UI.BaseUi.AfterOpenDel o)
    {
        ToLua.Push(L, o);
    }

    class Thunder_UI_BaseUi_BeforeCloseDel_Event : LuaDelegate
    {
        public Thunder_UI_BaseUi_BeforeCloseDel_Event(LuaFunction func) : base(func) { }
        public Thunder_UI_BaseUi_BeforeCloseDel_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(Thunder.UI.BaseUi param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(Thunder.UI.BaseUi param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public Thunder.UI.BaseUi.BeforeCloseDel Thunder_UI_BaseUi_BeforeCloseDel(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            Thunder.UI.BaseUi.BeforeCloseDel fn = delegate (Thunder.UI.BaseUi param0) { };
            return fn;
        }

        if (!flag)
        {
            Thunder_UI_BaseUi_BeforeCloseDel_Event target = new Thunder_UI_BaseUi_BeforeCloseDel_Event(func);
            Thunder.UI.BaseUi.BeforeCloseDel d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            Thunder_UI_BaseUi_BeforeCloseDel_Event target = new Thunder_UI_BaseUi_BeforeCloseDel_Event(func, self);
            Thunder.UI.BaseUi.BeforeCloseDel d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_Thunder_UI_BaseUi_BeforeCloseDel(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(Thunder.UI.BaseUi.BeforeCloseDel), L, pos);
    }

    void Push_Thunder_UI_BaseUi_BeforeCloseDel(IntPtr L, Thunder.UI.BaseUi.BeforeCloseDel o)
    {
        ToLua.Push(L, o);
    }

    class Thunder_UI_BaseUi_CloseCheck_Event : LuaDelegate
    {
        public Thunder_UI_BaseUi_CloseCheck_Event(LuaFunction func) : base(func) { }
        public Thunder_UI_BaseUi_CloseCheck_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(Thunder.UI.BaseUi param0, ref bool param1)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PushSealed(param1);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(Thunder.UI.BaseUi param0, ref bool param1)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PushSealed(param1);
            func.PCall();
            func.EndPCall();
        }
    }

    public Thunder.UI.BaseUi.CloseCheck Thunder_UI_BaseUi_CloseCheck(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            Thunder.UI.BaseUi.CloseCheck fn = delegate (Thunder.UI.BaseUi param0, ref bool param1) { };
            return fn;
        }

        if (!flag)
        {
            Thunder_UI_BaseUi_CloseCheck_Event target = new Thunder_UI_BaseUi_CloseCheck_Event(func);
            Thunder.UI.BaseUi.CloseCheck d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            Thunder_UI_BaseUi_CloseCheck_Event target = new Thunder_UI_BaseUi_CloseCheck_Event(func, self);
            Thunder.UI.BaseUi.CloseCheck d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_Thunder_UI_BaseUi_CloseCheck(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(Thunder.UI.BaseUi.CloseCheck), L, pos);
    }

    void Push_Thunder_UI_BaseUi_CloseCheck(IntPtr L, Thunder.UI.BaseUi.CloseCheck o)
    {
        ToLua.Push(L, o);
    }

    class Thunder_UI_BuildShipPanel_BuildShipCompleteDel_Event : LuaDelegate
    {
        public Thunder_UI_BuildShipPanel_BuildShipCompleteDel_Event(LuaFunction func) : base(func) { }
        public Thunder_UI_BuildShipPanel_BuildShipCompleteDel_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(Thunder.UI.BuildShipPanel param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(Thunder.UI.BuildShipPanel param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public Thunder.UI.BuildShipPanel.BuildShipCompleteDel Thunder_UI_BuildShipPanel_BuildShipCompleteDel(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            Thunder.UI.BuildShipPanel.BuildShipCompleteDel fn = delegate (Thunder.UI.BuildShipPanel param0) { };
            return fn;
        }

        if (!flag)
        {
            Thunder_UI_BuildShipPanel_BuildShipCompleteDel_Event target = new Thunder_UI_BuildShipPanel_BuildShipCompleteDel_Event(func);
            Thunder.UI.BuildShipPanel.BuildShipCompleteDel d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            Thunder_UI_BuildShipPanel_BuildShipCompleteDel_Event target = new Thunder_UI_BuildShipPanel_BuildShipCompleteDel_Event(func, self);
            Thunder.UI.BuildShipPanel.BuildShipCompleteDel d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_Thunder_UI_BuildShipPanel_BuildShipCompleteDel(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(Thunder.UI.BuildShipPanel.BuildShipCompleteDel), L, pos);
    }

    void Push_Thunder_UI_BuildShipPanel_BuildShipCompleteDel(IntPtr L, Thunder.UI.BuildShipPanel.BuildShipCompleteDel o)
    {
        ToLua.Push(L, o);
    }

    class Thunder_Turret_Aircraft_DeadDel_Event : LuaDelegate
    {
        public Thunder_Turret_Aircraft_DeadDel_Event(LuaFunction func) : base(func) { }
        public Thunder_Turret_Aircraft_DeadDel_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(Thunder.Turret.Aircraft param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(Thunder.Turret.Aircraft param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public Thunder.Turret.Aircraft.DeadDel Thunder_Turret_Aircraft_DeadDel(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            Thunder.Turret.Aircraft.DeadDel fn = delegate (Thunder.Turret.Aircraft param0) { };
            return fn;
        }

        if (!flag)
        {
            Thunder_Turret_Aircraft_DeadDel_Event target = new Thunder_Turret_Aircraft_DeadDel_Event(func);
            Thunder.Turret.Aircraft.DeadDel d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            Thunder_Turret_Aircraft_DeadDel_Event target = new Thunder_Turret_Aircraft_DeadDel_Event(func, self);
            Thunder.Turret.Aircraft.DeadDel d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_Thunder_Turret_Aircraft_DeadDel(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(Thunder.Turret.Aircraft.DeadDel), L, pos);
    }

    void Push_Thunder_Turret_Aircraft_DeadDel(IntPtr L, Thunder.Turret.Aircraft.DeadDel o)
    {
        ToLua.Push(L, o);
    }

    class Thunder_Tool_BehaviorTree_ActionNode_DelAction_Event : LuaDelegate
    {
        public Thunder_Tool_BehaviorTree_ActionNode_DelAction_Event(LuaFunction func) : base(func) { }
        public Thunder_Tool_BehaviorTree_ActionNode_DelAction_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call()
        {
            func.Call();
        }

        public void CallWithSelf()
        {
            func.BeginPCall();
            func.Push(self);
            func.PCall();
            func.EndPCall();
        }
    }

    public Thunder.Tool.BehaviorTree.ActionNode.DelAction Thunder_Tool_BehaviorTree_ActionNode_DelAction(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            Thunder.Tool.BehaviorTree.ActionNode.DelAction fn = delegate () { };
            return fn;
        }

        if (!flag)
        {
            Thunder_Tool_BehaviorTree_ActionNode_DelAction_Event target = new Thunder_Tool_BehaviorTree_ActionNode_DelAction_Event(func);
            Thunder.Tool.BehaviorTree.ActionNode.DelAction d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            Thunder_Tool_BehaviorTree_ActionNode_DelAction_Event target = new Thunder_Tool_BehaviorTree_ActionNode_DelAction_Event(func, self);
            Thunder.Tool.BehaviorTree.ActionNode.DelAction d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_Thunder_Tool_BehaviorTree_ActionNode_DelAction(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(Thunder.Tool.BehaviorTree.ActionNode.DelAction), L, pos);
    }

    void Push_Thunder_Tool_BehaviorTree_ActionNode_DelAction(IntPtr L, Thunder.Tool.BehaviorTree.ActionNode.DelAction o)
    {
        ToLua.Push(L, o);
    }

    class Thunder_Tool_BehaviorTree_ConditionNode_DelCondition_Event : LuaDelegate
    {
        public Thunder_Tool_BehaviorTree_ConditionNode_DelCondition_Event(LuaFunction func) : base(func) { }
        public Thunder_Tool_BehaviorTree_ConditionNode_DelCondition_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public bool Call()
        {
            func.BeginPCall();
            func.PCall();
            bool ret = func.CheckBoolean();
            func.EndPCall();
            return ret;
        }

        public bool CallWithSelf()
        {
            func.BeginPCall();
            func.Push(self);
            func.PCall();
            bool ret = func.CheckBoolean();
            func.EndPCall();
            return ret;
        }
    }

    public Thunder.Tool.BehaviorTree.ConditionNode.DelCondition Thunder_Tool_BehaviorTree_ConditionNode_DelCondition(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            Thunder.Tool.BehaviorTree.ConditionNode.DelCondition fn = delegate () { return false; };
            return fn;
        }

        if (!flag)
        {
            Thunder_Tool_BehaviorTree_ConditionNode_DelCondition_Event target = new Thunder_Tool_BehaviorTree_ConditionNode_DelCondition_Event(func);
            Thunder.Tool.BehaviorTree.ConditionNode.DelCondition d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            Thunder_Tool_BehaviorTree_ConditionNode_DelCondition_Event target = new Thunder_Tool_BehaviorTree_ConditionNode_DelCondition_Event(func, self);
            Thunder.Tool.BehaviorTree.ConditionNode.DelCondition d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_Thunder_Tool_BehaviorTree_ConditionNode_DelCondition(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(Thunder.Tool.BehaviorTree.ConditionNode.DelCondition), L, pos);
    }

    void Push_Thunder_Tool_BehaviorTree_ConditionNode_DelCondition(IntPtr L, Thunder.Tool.BehaviorTree.ConditionNode.DelCondition o)
    {
        ToLua.Push(L, o);
    }

    class System_Action_Thunder_UI_BaseUi_Event : LuaDelegate
    {
        public System_Action_Thunder_UI_BaseUi_Event(LuaFunction func) : base(func) { }
        public System_Action_Thunder_UI_BaseUi_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(Thunder.UI.BaseUi param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(Thunder.UI.BaseUi param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public System.Action<Thunder.UI.BaseUi> System_Action_Thunder_UI_BaseUi(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Action<Thunder.UI.BaseUi> fn = delegate (Thunder.UI.BaseUi param0) { };
            return fn;
        }

        if (!flag)
        {
            System_Action_Thunder_UI_BaseUi_Event target = new System_Action_Thunder_UI_BaseUi_Event(func);
            System.Action<Thunder.UI.BaseUi> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Action_Thunder_UI_BaseUi_Event target = new System_Action_Thunder_UI_BaseUi_Event(func, self);
            System.Action<Thunder.UI.BaseUi> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Action_Thunder_UI_BaseUi(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Action<Thunder.UI.BaseUi>), L, pos);
    }

    void Push_System_Action_Thunder_UI_BaseUi(IntPtr L, System.Action<Thunder.UI.BaseUi> o)
    {
        ToLua.Push(L, o);
    }

    class System_Action_Thunder_GameMode_BaseGameMode_Event : LuaDelegate
    {
        public System_Action_Thunder_GameMode_BaseGameMode_Event(LuaFunction func) : base(func) { }
        public System_Action_Thunder_GameMode_BaseGameMode_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(Thunder.GameMode.BaseGameMode param0)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(Thunder.GameMode.BaseGameMode param0)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PCall();
            func.EndPCall();
        }
    }

    public System.Action<Thunder.GameMode.BaseGameMode> System_Action_Thunder_GameMode_BaseGameMode(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            System.Action<Thunder.GameMode.BaseGameMode> fn = delegate (Thunder.GameMode.BaseGameMode param0) { };
            return fn;
        }

        if (!flag)
        {
            System_Action_Thunder_GameMode_BaseGameMode_Event target = new System_Action_Thunder_GameMode_BaseGameMode_Event(func);
            System.Action<Thunder.GameMode.BaseGameMode> d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            System_Action_Thunder_GameMode_BaseGameMode_Event target = new System_Action_Thunder_GameMode_BaseGameMode_Event(func, self);
            System.Action<Thunder.GameMode.BaseGameMode> d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_System_Action_Thunder_GameMode_BaseGameMode(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(System.Action<Thunder.GameMode.BaseGameMode>), L, pos);
    }

    void Push_System_Action_Thunder_GameMode_BaseGameMode(IntPtr L, System.Action<Thunder.GameMode.BaseGameMode> o)
    {
        ToLua.Push(L, o);
    }

    class Thunder_GameMode_BaseGameMode_ModeComplete_Event : LuaDelegate
    {
        public Thunder_GameMode_BaseGameMode_ModeComplete_Event(LuaFunction func) : base(func) { }
        public Thunder_GameMode_BaseGameMode_ModeComplete_Event(LuaFunction func, LuaTable self) : base(func, self) { }

        public void Call(Thunder.GameMode.BaseGameMode param0, Thunder.GameMode.BaseGameMode.CompleteParam param1)
        {
            func.BeginPCall();
            func.Push(param0);
            func.PushValue(param1);
            func.PCall();
            func.EndPCall();
        }

        public void CallWithSelf(Thunder.GameMode.BaseGameMode param0, Thunder.GameMode.BaseGameMode.CompleteParam param1)
        {
            func.BeginPCall();
            func.Push(self);
            func.Push(param0);
            func.PushValue(param1);
            func.PCall();
            func.EndPCall();
        }
    }

    public Thunder.GameMode.BaseGameMode.ModeComplete Thunder_GameMode_BaseGameMode_ModeComplete(LuaFunction func, LuaTable self, bool flag)
    {
        if (func == null)
        {
            Thunder.GameMode.BaseGameMode.ModeComplete fn = delegate (Thunder.GameMode.BaseGameMode param0, Thunder.GameMode.BaseGameMode.CompleteParam param1) { };
            return fn;
        }

        if (!flag)
        {
            Thunder_GameMode_BaseGameMode_ModeComplete_Event target = new Thunder_GameMode_BaseGameMode_ModeComplete_Event(func);
            Thunder.GameMode.BaseGameMode.ModeComplete d = target.Call;
            target.method = d.Method;
            return d;
        }
        else
        {
            Thunder_GameMode_BaseGameMode_ModeComplete_Event target = new Thunder_GameMode_BaseGameMode_ModeComplete_Event(func, self);
            Thunder.GameMode.BaseGameMode.ModeComplete d = target.CallWithSelf;
            target.method = d.Method;
            return d;
        }
    }

    bool Check_Thunder_GameMode_BaseGameMode_ModeComplete(IntPtr L, int pos)
    {
        return TypeChecker.CheckDelegateType(typeof(Thunder.GameMode.BaseGameMode.ModeComplete), L, pos);
    }

    void Push_Thunder_GameMode_BaseGameMode_ModeComplete(IntPtr L, Thunder.GameMode.BaseGameMode.ModeComplete o)
    {
        ToLua.Push(L, o);
    }

}

