//this source code was auto-generated by tolua#, do not modify it
using LuaInterface;
using System;
using UnityEngine;

public static class LuaBinder
{
    public static void Bind(LuaState L)
    {
        float t = Time.realtimeSinceStartup;
        L.BeginModule(null);
        LuaInterface_DebuggerWrap.Register(L);
        LuaProfilerWrap.Register(L);
        L.BeginModule("LuaInterface");
        LuaInterface_LuaInjectionStationWrap.Register(L);
        LuaInterface_InjectTypeWrap.Register(L);
        L.EndModule();
        L.BeginModule("UnityEngine");
        UnityEngine_ComponentWrap.Register(L);
        UnityEngine_TransformWrap.Register(L);
        UnityEngine_MaterialWrap.Register(L);
        UnityEngine_LightWrap.Register(L);
        UnityEngine_CameraWrap.Register(L);
        UnityEngine_AudioSourceWrap.Register(L);
        UnityEngine_BehaviourWrap.Register(L);
        UnityEngine_MonoBehaviourWrap.Register(L);
        UnityEngine_GameObjectWrap.Register(L);
        UnityEngine_TrackedReferenceWrap.Register(L);
        UnityEngine_ApplicationWrap.Register(L);
        UnityEngine_PhysicsWrap.Register(L);
        UnityEngine_ColliderWrap.Register(L);
        UnityEngine_TimeWrap.Register(L);
        UnityEngine_TextureWrap.Register(L);
        UnityEngine_Texture2DWrap.Register(L);
        UnityEngine_ShaderWrap.Register(L);
        UnityEngine_RendererWrap.Register(L);
        UnityEngine_ScreenWrap.Register(L);
        UnityEngine_CameraClearFlagsWrap.Register(L);
        UnityEngine_AudioClipWrap.Register(L);
        UnityEngine_AssetBundleWrap.Register(L);
        UnityEngine_ParticleSystemWrap.Register(L);
        UnityEngine_AsyncOperationWrap.Register(L);
        UnityEngine_LightTypeWrap.Register(L);
        UnityEngine_SleepTimeoutWrap.Register(L);
        UnityEngine_AnimatorWrap.Register(L);
        UnityEngine_InputWrap.Register(L);
        UnityEngine_KeyCodeWrap.Register(L);
        UnityEngine_SkinnedMeshRendererWrap.Register(L);
        UnityEngine_SpaceWrap.Register(L);
        UnityEngine_AnimationBlendModeWrap.Register(L);
        UnityEngine_QueueModeWrap.Register(L);
        UnityEngine_PlayModeWrap.Register(L);
        UnityEngine_WrapModeWrap.Register(L);
        UnityEngine_QualitySettingsWrap.Register(L);
        UnityEngine_RenderSettingsWrap.Register(L);
        UnityEngine_ResourcesWrap.Register(L);
        UnityEngine_AudioBehaviourWrap.Register(L);
        L.BeginModule("UI");
        UnityEngine_UI_ButtonWrap.Register(L);
        UnityEngine_UI_SelectableWrap.Register(L);
        L.EndModule();
        L.BeginModule("EventSystems");
        UnityEngine_EventSystems_UIBehaviourWrap.Register(L);
        L.EndModule();
        L.BeginModule("Events");
        L.RegFunction("UnityAction", UnityEngine_Events_UnityAction);
        L.EndModule();
        L.BeginModule("Camera");
        L.RegFunction("CameraCallback", UnityEngine_Camera_CameraCallback);
        L.EndModule();
        L.BeginModule("Application");
        L.RegFunction("AdvertisingIdentifierCallback", UnityEngine_Application_AdvertisingIdentifierCallback);
        L.RegFunction("LowMemoryCallback", UnityEngine_Application_LowMemoryCallback);
        L.RegFunction("LogCallback", UnityEngine_Application_LogCallback);
        L.EndModule();
        L.BeginModule("AudioClip");
        L.RegFunction("PCMReaderCallback", UnityEngine_AudioClip_PCMReaderCallback);
        L.RegFunction("PCMSetPositionCallback", UnityEngine_AudioClip_PCMSetPositionCallback);
        L.EndModule();
        L.EndModule();
        L.BeginModule("Thunder");
        Thunder_BulletWrap.Register(L);
        Thunder_CameraControllerWrap.Register(L);
        Thunder_PlayerRocketWrap.Register(L);
        L.BeginModule("Utility");
        Thunder_Utility_ControllerInputWrap.Register(L);
        Thunder_Utility_DialogResultWrap.Register(L);
        Thunder_Utility_UiInitActionWrap.Register(L);
        Thunder_Utility_GlobalBufferWrap.Register(L);
        Thunder_Utility_GlobalSettingsWrap.Register(L);
        Thunder_Utility_PathsWrap.Register(L);
        L.EndModule();
        L.BeginModule("UI");
        Thunder_UI_AimRingWrap.Register(L);
        Thunder_UI_BaseButtonWrap.Register(L);
        Thunder_UI_BaseUiWrap.Register(L);
        Thunder_UI_BuildShipPanelWrap.Register(L);
        Thunder_UI_CheckoutPanelWrap.Register(L);
        Thunder_UI_ConfirmDialogWrap.Register(L);
        Thunder_UI_CreateSaveControllerWrap.Register(L);
        Thunder_UI_DragMoveButtonWrap.Register(L);
        Thunder_UI_InputDialogWrap.Register(L);
        Thunder_UI_JoystickWrap.Register(L);
        Thunder_UI_LevelPlaneWrap.Register(L);
        Thunder_UI_ListPlaneWrap.Register(L);
        Thunder_UI_LoadOrCreateSaveUiWrap.Register(L);
        Thunder_UI_LogPanelWrap.Register(L);
        Thunder_UI_MessageDialogWrap.Register(L);
        Thunder_UI_ScaleDragButtonWrap.Register(L);
        Thunder_UI_SurvivalLiUIWrap.Register(L);
        Thunder_UI_SurvivalNoliUIWrap.Register(L);
        L.BeginModule("BaseUi");
        L.RegFunction("PointerDel", Thunder_UI_BaseUi_PointerDel);
        L.RegFunction("AfterOpenDel", Thunder_UI_BaseUi_AfterOpenDel);
        L.RegFunction("BeforeCloseDel", Thunder_UI_BaseUi_BeforeCloseDel);
        L.RegFunction("CloseCheck", Thunder_UI_BaseUi_CloseCheck);
        L.EndModule();
        L.BeginModule("BuildShipPanel");
        L.RegFunction("BuildShipCompleteDel", Thunder_UI_BuildShipPanel_BuildShipCompleteDel);
        L.EndModule();
        L.EndModule();
        L.BeginModule("Turret");
        Thunder_Turret_AircraftWrap.Register(L);
        Thunder_Turret_ControllerWrap.Register(L);
        Thunder_Turret_FactoryTurretWrap.Register(L);
        Thunder_Turret_FighterWrap.Register(L);
        Thunder_Turret_MachineGunFighterWrap.Register(L);
        Thunder_Turret_NormalBulletWrap.Register(L);
        Thunder_Turret_NormalFighterWrap.Register(L);
        Thunder_Turret_ShipWrap.Register(L);
        Thunder_Turret_ShootingTurretWrap.Register(L);
        Thunder_Turret_TurretWrap.Register(L);
        L.BeginModule("Aircraft");
        L.RegFunction("DeadDel", Thunder_Turret_Aircraft_DeadDel);
        L.EndModule();
        L.EndModule();
        L.BeginModule("Tool");
        Thunder_Tool_CompareVecWrap.Register(L);
        Thunder_Tool_ConsoleWindowWrap.Register(L);
        Thunder_Tool_DisposableDictionaryWrap.Register(L);
        Thunder_Tool_ToolsWrap.Register(L);
        L.BeginModule("SerializableStruct");
        Thunder_Tool_SerializableStruct_SerializableVector3Wrap.Register(L);
        L.EndModule();
        L.BeginModule("ObjectPool");
        Thunder_Tool_ObjectPool_ObjectPoolWrap.Register(L);
        L.EndModule();
        L.BeginModule("BuffData");
        Thunder_Tool_BuffData_BuffDataWrap.Register(L);
        L.EndModule();
        L.BeginModule("BehaviorTree");
        Thunder_Tool_BehaviorTree_ActionNodeWrap.Register(L);
        Thunder_Tool_BehaviorTree_BehaviorTreeWrap.Register(L);
        Thunder_Tool_BehaviorTree_ConditionNodeWrap.Register(L);
        Thunder_Tool_BehaviorTree_NodeWrap.Register(L);
        Thunder_Tool_BehaviorTree_SelectorNodeWrap.Register(L);
        L.BeginModule("ActionNode");
        L.RegFunction("DelAction", Thunder_Tool_BehaviorTree_ActionNode_DelAction);
        L.EndModule();
        L.BeginModule("ConditionNode");
        L.RegFunction("DelCondition", Thunder_Tool_BehaviorTree_ConditionNode_DelCondition);
        L.EndModule();
        L.EndModule();
        L.EndModule();
        L.BeginModule("Test");
        Thunder_Test_SaveTestWrap.Register(L);
        L.EndModule();
        L.BeginModule("Sys");
        Thunder_Sys_BundleSysWrap.Register(L);
        Thunder_Sys_AssetIdWrap.Register(L);
        Thunder_Sys_DataBaseSysWrap.Register(L);
        Thunder_Sys_DataTableWrap.Register(L);
        Thunder_Sys_LuaSysWrap.Register(L);
        Thunder_Sys_SaveSysWrap.Register(L);
        Thunder_Sys_StableWrap.Register(L);
        Thunder_Sys_UiSysWrap.Register(L);
        Thunder_Sys_ValueSysWrap.Register(L);
        L.EndModule();
        L.BeginModule("Skill");
        Thunder_Skill_ChargeWrap.Register(L);
        Thunder_Skill_CircleShootWrap.Register(L);
        Thunder_Skill_SkillWrap.Register(L);
        L.EndModule();
        L.BeginModule("PublicScript");
        Thunder_PublicScript_BattleSceneControllerWrap.Register(L);
        Thunder_PublicScript_CampManagerWrap.Register(L);
        Thunder_PublicScript_ControlManagerWrap.Register(L);
        Thunder_PublicScript_GameModeManagerWrap.Register(L);
        Thunder_PublicScript_LevelManagerWrap.Register(L);
        Thunder_PublicScript_PlayerManagerWrap.Register(L);
        L.EndModule();
        L.BeginModule("GameMode");
        Thunder_GameMode_BaseGameModeWrap.Register(L);
        Thunder_GameMode_SurvivalWrap.Register(L);
        Thunder_GameMode_SurvivalLiWrap.Register(L);
        Thunder_GameMode_SurvivalNoliWrap.Register(L);
        L.BeginModule("BaseGameMode");
        L.RegFunction("ModeComplete", Thunder_GameMode_BaseGameMode_ModeComplete);
        L.EndModule();
        L.EndModule();
        L.BeginModule("Character");
        Thunder_Character_ControllerWrap.Register(L);
        L.EndModule();
        L.BeginModule("Behavior");
        Thunder_Behavior_DelegateFixedInvokeWrap.Register(L);
        Thunder_Behavior_DelegateInvokeWrap.Register(L);
        Thunder_Behavior_GetCurrentGameObjectWrap.Register(L);
        Thunder_Behavior_GetDistanceWrap.Register(L);
        Thunder_Behavior_IsNotNullWrap.Register(L);
        Thunder_Behavior_SwitcherWrap.Register(L);
        L.EndModule();
        L.EndModule();
        L.BeginModule("BehaviorDesigner");
        L.BeginModule("Runtime");
        L.BeginModule("Tasks");
        BehaviorDesigner_Runtime_Tasks_ActionWrap.Register(L);
        BehaviorDesigner_Runtime_Tasks_TaskWrap.Register(L);
        BehaviorDesigner_Runtime_Tasks_ConditionalWrap.Register(L);
        BehaviorDesigner_Runtime_Tasks_DecoratorWrap.Register(L);
        BehaviorDesigner_Runtime_Tasks_ParentTaskWrap.Register(L);
        L.EndModule();
        L.EndModule();
        L.EndModule();
        L.BeginModule("System");
        L.RegFunction("Action", System_Action);
        L.RegFunction("Predicate_int", System_Predicate_int);
        L.RegFunction("Action_int", System_Action_int);
        L.RegFunction("Comparison_int", System_Comparison_int);
        L.RegFunction("Func_int_int", System_Func_int_int);
        L.RegFunction("Action_bool", System_Action_bool);
        L.RegFunction("Action_string", System_Action_string);
        L.RegFunction("Func_bool", System_Func_bool);
        L.RegFunction("Action_UnityEngine_AsyncOperation", System_Action_UnityEngine_AsyncOperation);
        L.RegFunction("Action_Thunder_UI_BaseUi", System_Action_Thunder_UI_BaseUi);
        L.RegFunction("Action_Thunder_GameMode_BaseGameMode", System_Action_Thunder_GameMode_BaseGameMode);
        L.EndModule();
        L.EndModule();
        L.BeginPreLoad();
        L.AddPreLoad("UnityEngine.BoxCollider", LuaOpen_UnityEngine_BoxCollider, typeof(UnityEngine.BoxCollider));
        L.AddPreLoad("UnityEngine.MeshCollider", LuaOpen_UnityEngine_MeshCollider, typeof(UnityEngine.MeshCollider));
        L.AddPreLoad("UnityEngine.SphereCollider", LuaOpen_UnityEngine_SphereCollider, typeof(UnityEngine.SphereCollider));
        L.AddPreLoad("UnityEngine.CharacterController", LuaOpen_UnityEngine_CharacterController, typeof(UnityEngine.CharacterController));
        L.AddPreLoad("UnityEngine.CapsuleCollider", LuaOpen_UnityEngine_CapsuleCollider, typeof(UnityEngine.CapsuleCollider));
        L.AddPreLoad("UnityEngine.Animation", LuaOpen_UnityEngine_Animation, typeof(UnityEngine.Animation));
        L.AddPreLoad("UnityEngine.AnimationClip", LuaOpen_UnityEngine_AnimationClip, typeof(UnityEngine.AnimationClip));
        L.AddPreLoad("UnityEngine.AnimationState", LuaOpen_UnityEngine_AnimationState, typeof(UnityEngine.AnimationState));
        L.AddPreLoad("UnityEngine.SkinWeights", LuaOpen_UnityEngine_SkinWeights, typeof(UnityEngine.SkinWeights));
        L.AddPreLoad("UnityEngine.RenderTexture", LuaOpen_UnityEngine_RenderTexture, typeof(UnityEngine.RenderTexture));
        L.AddPreLoad("UnityEngine.Rigidbody", LuaOpen_UnityEngine_Rigidbody, typeof(UnityEngine.Rigidbody));
        L.EndPreLoad();
        Debugger.Log("Register lua type cost time: {0}", Time.realtimeSinceStartup - t);
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int UnityEngine_Events_UnityAction(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<UnityEngine.Events.UnityAction>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int UnityEngine_Camera_CameraCallback(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<UnityEngine.Camera.CameraCallback>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<UnityEngine.Camera.CameraCallback>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int UnityEngine_Application_AdvertisingIdentifierCallback(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<UnityEngine.Application.AdvertisingIdentifierCallback>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int UnityEngine_Application_LowMemoryCallback(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<UnityEngine.Application.LowMemoryCallback>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<UnityEngine.Application.LowMemoryCallback>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int UnityEngine_Application_LogCallback(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<UnityEngine.Application.LogCallback>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<UnityEngine.Application.LogCallback>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int UnityEngine_AudioClip_PCMReaderCallback(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<UnityEngine.AudioClip.PCMReaderCallback>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<UnityEngine.AudioClip.PCMReaderCallback>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int UnityEngine_AudioClip_PCMSetPositionCallback(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<UnityEngine.AudioClip.PCMSetPositionCallback>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Thunder_UI_BaseUi_PointerDel(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<Thunder.UI.BaseUi.PointerDel>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<Thunder.UI.BaseUi.PointerDel>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Thunder_UI_BaseUi_AfterOpenDel(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<Thunder.UI.BaseUi.AfterOpenDel>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<Thunder.UI.BaseUi.AfterOpenDel>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Thunder_UI_BaseUi_BeforeCloseDel(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<Thunder.UI.BaseUi.BeforeCloseDel>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<Thunder.UI.BaseUi.BeforeCloseDel>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Thunder_UI_BaseUi_CloseCheck(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<Thunder.UI.BaseUi.CloseCheck>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<Thunder.UI.BaseUi.CloseCheck>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Thunder_UI_BuildShipPanel_BuildShipCompleteDel(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<Thunder.UI.BuildShipPanel.BuildShipCompleteDel>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<Thunder.UI.BuildShipPanel.BuildShipCompleteDel>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Thunder_Turret_Aircraft_DeadDel(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<Thunder.Turret.Aircraft.DeadDel>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<Thunder.Turret.Aircraft.DeadDel>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Thunder_Tool_BehaviorTree_ActionNode_DelAction(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<Thunder.Tool.BehaviorTree.ActionNode.DelAction>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<Thunder.Tool.BehaviorTree.ActionNode.DelAction>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Thunder_Tool_BehaviorTree_ConditionNode_DelCondition(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<Thunder.Tool.BehaviorTree.ConditionNode.DelCondition>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<Thunder.Tool.BehaviorTree.ConditionNode.DelCondition>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int Thunder_GameMode_BaseGameMode_ModeComplete(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<Thunder.GameMode.BaseGameMode.ModeComplete>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<Thunder.GameMode.BaseGameMode.ModeComplete>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Action(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Action>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Action>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Predicate_int(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Predicate<int>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Predicate<int>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Action_int(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Action<int>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Action<int>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Comparison_int(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Comparison<int>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Comparison<int>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Func_int_int(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Func<int, int>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Func<int, int>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Action_bool(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Action<bool>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Action<bool>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Action_string(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Action<string>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Action<string>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Func_bool(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Func<bool>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Func<bool>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Action_UnityEngine_AsyncOperation(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Action<UnityEngine.AsyncOperation>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Action<UnityEngine.AsyncOperation>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Action_Thunder_UI_BaseUi(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Action<Thunder.UI.BaseUi>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Action<Thunder.UI.BaseUi>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int System_Action_Thunder_GameMode_BaseGameMode(IntPtr L)
    {
        try
        {
            int count = LuaDLL.lua_gettop(L);
            LuaFunction func = ToLua.CheckLuaFunction(L, 1);

            if (count == 1)
            {
                Delegate arg1 = DelegateTraits<System.Action<Thunder.GameMode.BaseGameMode>>.Create(func);
                ToLua.Push(L, arg1);
            }
            else
            {
                LuaTable self = ToLua.CheckLuaTable(L, 2);
                Delegate arg1 = DelegateTraits<System.Action<Thunder.GameMode.BaseGameMode>>.Create(func, self);
                ToLua.Push(L, arg1);
            }
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_BoxCollider(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_BoxColliderWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.BoxCollider));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_MeshCollider(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_MeshColliderWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.MeshCollider));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_SphereCollider(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_SphereColliderWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.SphereCollider));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_CharacterController(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_CharacterControllerWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.CharacterController));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_CapsuleCollider(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_CapsuleColliderWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.CapsuleCollider));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_Animation(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_AnimationWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.Animation));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_AnimationClip(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_AnimationClipWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.AnimationClip));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_AnimationState(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_AnimationStateWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.AnimationState));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_SkinWeights(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_SkinWeightsWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.SkinWeights));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_RenderTexture(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_RenderTextureWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.RenderTexture));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }

    [MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
    static int LuaOpen_UnityEngine_Rigidbody(IntPtr L)
    {
        try
        {
            LuaState state = LuaState.Get(L);
            state.BeginPreModule("UnityEngine");
            UnityEngine_RigidbodyWrap.Register(state);
            int reference = state.GetMetaReference(typeof(UnityEngine.Rigidbody));
            state.EndPreModule(L, reference);
            return 1;
        }
        catch (Exception e)
        {
            return LuaDLL.toluaL_exception(L, e);
        }
    }
}

